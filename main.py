import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GPT_MODE = os.getenv("GPT_MODE", "mock")
GOOGLE_SHEET_ENABLED = os.getenv("GOOGLE_SHEET", "false").lower() == "true"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–º–ø–æ—Ä—Ç OpenAI
if GPT_MODE == "real":
    import openai
    openai.api_key = os.getenv("OPENAI_API_KEY")

# Google Sheets
if GOOGLE_SHEET_ENABLED:
    import gspread
    from oauth2client.service_account import ServiceAccountCredentials
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("google_credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("GPT Bot Leads").sheet1

# –ö–Ω–æ–ø–∫–∏
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üß¥ –£—Å–ª—É–≥–∏"), KeyboardButton("üìû –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
kb.add(KeyboardButton("‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã"))

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=kb)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    name = message.from_user.full_name
    phone = message.contact.phone_number
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {phone}!")

    if GOOGLE_SHEET_ENABLED:
        sheet.append_row([name, phone, ""])

@dp.message_handler()
async def handle_text(message: types.Message):
    user_input = message.text

    if GPT_MODE == "mock":
        response = get_mock_response(user_input)
    else:
        response = await get_real_gpt_response(user_input)

    await message.reply(response)

def get_mock_response(user_input):
    if "–∂–∏—Ä–Ω–∞—è –∫–æ–∂–∞" in user_input.lower():
        return "–î–ª—è –∂–∏—Ä–Ω–æ–π –∫–æ–∂–∏ –ø–æ–¥–æ–π–¥—ë—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞ –∏ –º–∞—Å–∫–∞ —Å –≥–ª–∏–Ω–æ–π. –°—Ç–æ–∏–º–æ—Å—Ç—å 45‚Ç¨."
    elif "–ø–æ–¥–∞—Ä–æ–∫" in user_input.lower():
        return "–°–æ–≤–µ—Ç—É—é –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –±–æ–∫—Å ‚Äú–í–∏–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞‚Äù: –≤–∏–Ω–æ, —Å–≤–µ—á–∞, –∫—Ä–∞—Å–∫–∏. 37‚Ç¨, –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞."
    elif "–∫—É—Ä—Å" in user_input.lower():
        return "–ö—É—Ä—Å –ø–æ–¥–æ–π–¥—ë—Ç –Ω–æ–≤–∏—á–∫–∞–º ‚Äî –Ω–∞—á–Ω—ë—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–æ—Ä–º, –Ω–∞ 3 —É—Ä–æ–∫–µ —É–∂–µ –±—É–¥–µ—Ç –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞."
    elif "—É—Å–ª—É–≥–∏" in user_input.lower():
        return "–ù–∞—à–∏ —É—Å–ª—É–≥–∏: —á–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞, –º–∞—Å—Å–∞–∂, –ø–∏–ª–∏–Ω–≥–∏. –ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"
    elif "–∫–æ–Ω—Ç–∞–∫—Ç" in user_input.lower():
        return "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ Instagram: @beauty_shop –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å: +7 900 000-00-00"
    else:
        return "–ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å?"

async def get_real_gpt_response(user_input):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç –∏–º–µ–Ω–∏ –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ, –ø–æ–Ω—è—Ç–Ω–æ, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ."},
            {"role": "user", "content": user_input}
        ]
    )
    return response['choices'][0]['message']['content']
